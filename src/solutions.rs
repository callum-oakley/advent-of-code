// generated by build.rs -- don't edit directly

mod year2015 {
    pub mod day01;
    pub mod day02;
    pub mod day03;
    pub mod day04;
    pub mod day05;
    pub mod day06;
    pub mod day07;
    pub mod day08;
    pub mod day09;
    pub mod day10;
    pub mod day11;
    pub mod day12;
}

use std::collections::BTreeMap;

pub struct Solution {
    pub part1: Option<fn(&str) -> String>,
    pub part2: Option<fn(&str) -> String>,
    pub tests: Option<fn() -> ()>,
}

// Clippy doesn't like the redundant to_string when the solution is
// already a String.
#[allow(clippy::redundant_clone)]
pub fn build() -> BTreeMap<u16, BTreeMap<u8, Solution>> {
    let mut solutions: BTreeMap<u16, BTreeMap<u8, Solution>> = BTreeMap::new();

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        1,
        Solution {
            part1: Some(|input| year2015::day01::part1(input).to_string()),
            part2: Some(|input| year2015::day01::part2(input).to_string()),
            tests: Some(year2015::day01::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        2,
        Solution {
            part1: Some(|input| year2015::day02::part1(input).to_string()),
            part2: Some(|input| year2015::day02::part2(input).to_string()),
            tests: None,
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        3,
        Solution {
            part1: Some(|input| year2015::day03::part1(input).to_string()),
            part2: Some(|input| year2015::day03::part2(input).to_string()),
            tests: Some(year2015::day03::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        4,
        Solution {
            part1: Some(|input| year2015::day04::part1(input).to_string()),
            part2: Some(|input| year2015::day04::part2(input).to_string()),
            tests: Some(year2015::day04::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        5,
        Solution {
            part1: Some(|input| year2015::day05::part1(input).to_string()),
            part2: Some(|input| year2015::day05::part2(input).to_string()),
            tests: Some(year2015::day05::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        6,
        Solution {
            part1: Some(|input| year2015::day06::part1(input).to_string()),
            part2: Some(|input| year2015::day06::part2(input).to_string()),
            tests: None,
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        7,
        Solution {
            part1: Some(|input| year2015::day07::part1(input).to_string()),
            part2: Some(|input| year2015::day07::part2(input).to_string()),
            tests: Some(year2015::day07::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        8,
        Solution {
            part1: Some(|input| year2015::day08::part1(input).to_string()),
            part2: Some(|input| year2015::day08::part2(input).to_string()),
            tests: Some(year2015::day08::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        9,
        Solution {
            part1: Some(|input| year2015::day09::part1(input).to_string()),
            part2: Some(|input| year2015::day09::part2(input).to_string()),
            tests: Some(year2015::day09::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        10,
        Solution {
            part1: Some(|input| year2015::day10::part1(input).to_string()),
            part2: Some(|input| year2015::day10::part2(input).to_string()),
            tests: Some(year2015::day10::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        11,
        Solution {
            part1: Some(|input| year2015::day11::part1(input).to_string()),
            part2: Some(|input| year2015::day11::part2(input).to_string()),
            tests: Some(year2015::day11::tests),
        },
    );

    solutions.entry(2015).or_insert_with(BTreeMap::new).insert(
        12,
        Solution {
            part1: Some(|input| year2015::day12::part1(input).to_string()),
            part2: Some(|input| year2015::day12::part2(input).to_string()),
            tests: Some(year2015::day12::tests),
        },
    );

    solutions
}
